name: CI-CD

on:
  push:
    branches: 
      - main
      - daniel-modernization
  pull_request:
    branches: 
      - main
      - daniel-modernization

env:
  IMAGE_NAME: portfolio

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Get dependencies
      working-directory: ./app # inside the container path
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: flake8 .
    
    - name: Security scan with Bandit
      run: bandit -r . -s B101
    
  build-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Bump version and set IMAGE_TAG
      id: versioning
      run: |
        git fetch --tags
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        VERSION=${TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "IMAGE_TAG=${NEW_VERSION}" >> $GITHUB_ENV
        echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT

        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: . # repo path
        file: ./Dockerfile # repo file path
        push: true
        tags: ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 
        
    - name: Save Docker version info to file
      run: echo "${{ env.IMAGE_TAG }}" > docker-version.txt

    - name: Upload Docker version as artifact
      uses: actions/upload-artifact@v4
      with:
        path: docker-version.txt
        name: docker-version