name: CI-CD

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - daniel-modernization
      - ci-improvment
  pull_request:
    branches:
      - main
      - daniel-modernization
      - ci-improvment

env:
  IMAGE_NAME: portfolio

jobs:

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_changes.outputs.should_build }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: flake8 .

    - name: Security scan with Bandit
      run: bandit -r . -s B101

    - name: Check if app or Docker files changed
      id: check_changes
      run: |
        git fetch --tags
        TAG=$(git tag --sort=-v:refname | head -n 1)
        TAG=${TAG:-v1.0.0}
        CHANGED=$(git diff --name-only $TAG HEAD)
        echo "$CHANGED"

        if echo "$CHANGED" | grep -qE '^(Dockerfile|requirements.txt|app/)'; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

  build-image:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log build trigger
      run: |
       echo "Build needed: ${{ needs.test.outputs.should_build }}"

    - name: Skip image build if not needed
      if: needs.test.outputs.should_build != 'true'
      run: echo "ðŸ›‘ No relevant changes detected â€“ skipping Docker build."

    - name: Bump version and set IMAGE_TAG
      if: needs.test.outputs.should_build == 'true'
      id: versioning
      run: |
        git fetch --tags
        TAG=$(git tag --sort=-v:refname | head -n 1)
        TAG=${TAG:-v1.0.0}
        VERSION=${TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

        echo "IMAGE_TAG=${NEW_VERSION}" >> $GITHUB_ENV
        echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT

        git config user.name "github-actions-runner"
        git config user.email "github-actions-runner@github.com"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION

    - name: Set up Docker Buildx
      if: needs.test.outputs.should_build == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: needs.test.outputs.should_build == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build and push Docker image
      if: needs.test.outputs.should_build == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Save Docker version to file
      if: needs.test.outputs.should_build == 'true'
      run: echo "${{ env.IMAGE_TAG }}" > docker-version.txt

    - name: Upload Docker version artifact
      if: needs.test.outputs.should_build == 'true'
      uses: actions/upload-artifact@v4
      with:
        path: docker-version.txt
        name: docker-version
